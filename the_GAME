#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <ctype.h>

/* Constants for TTT game board symbols. */
#define EMPTY  ' '
#define USER 'O'
#define COMPUTER 'X'

#define TRUE 1
#define FALSE 0

/* function prototypes. */
void displayOneRow(char s1, char s2, char s3);
void displayHorizontalLine();
int rowIsWinner(char s1, char s2, char s3);
void displayTTTBoards();
void playerturn(char board[3][3]);
void computerturn(char board[3][3]);
int winner(char board[3][3]);
int boardisfull(char board[3][3]);
void gameplay(char board[3][3]);

/* Function to initialize the game board with empty spaces */
void initializeBoard(char board[3][3]) {
    for(int i = 0; i < 3; ++i) {
        for(int j = 0; j < 3; ++j) {
            board[i][j] = EMPTY;
        }
    }
}

/* function main. */
int main() {
    printf("WELCOME TO TIC-TAC-TOE\nHere are the rules of the game:\n");
    printf("1) The game board is a three by three square grid of symbols, which is initially empty.\n");
    printf("   The squares are numbered as in the above image.\n");
    printf("2) There are two players, named Player X and Player O. Player O goes first.\n");
    printf("3) A player moves by selecting an empty square on the board.\n");
    printf("4) A symbol representing that player (i.e., an X or an O) is placed on the selected square,\n");
    printf("   and it becomes the other player's turn.\n");
    printf("5) The game is won if one player gets three symbols in a row (horizontally, vertically, or diagonally).\n");
    printf("6) The game is a draw if all the squares become occupied; yet no player has won.\n");
    printf("7) To make a legal move, the user must select an empty square on the board by entering an integer between 0 - 8,\n");
    printf("representing the 9 board squares.\n\n");

    int numgame = TRUE;

    while (numgame) {
        char board[3][3];
        initializeBoard(board);
        printf("LETS BEGIN!\n\n");
        gameplay(board);
        while(TRUE) {
            printf("lets have another game?(Y/N)");
            char playerwish;
            scanf(" %c", &playerwish);
            if ((playerwish == 'Y') || (playerwish == 'y')) {
                numgame = TRUE;
                break;
            } else if ((playerwish == 'N') || (playerwish == 'n')) {
                numgame = FALSE;
                break;
            } else {
                printf("WRONG INPUT. choose Y or N\n");
            }
        }
    }
    printf("THANK YOU!");
    return 0;
}

/* This function determines if a row of tic-tac-toe squares is a winning row. */
int rowIsWinner(char s1, char s2, char s3) {
    if ((s1 == s2) && (s2 == s3) && (s1 != ' ')) {
        return TRUE;
    } else {
        return FALSE;
    }
}

/* This function displays one horizontal line in a TTT board. */
void displayHorizontalLine() {
    for(int i = 0; i < 10; ++i) {
        printf("%c", '_');
    }
    printf("\n");
}

/* This function displays one row of a TTT board. */
void displayOneRow(char s1, char s2, char s3) {
    printf(" %c | %c | %c\n", s1, s2, s3);
}

/* This function shows a numbered board for reference. */
void displayTTTBoards() {
    printf("\nA numbered TTT board is displayed below to help you choose the square:\n");
    displayOneRow('0', '1', '2');
    displayHorizontalLine();
    displayOneRow('3', '4', '5');
    displayHorizontalLine();
    displayOneRow('6', '7', '8');
}

/* Function to display the Tic-Tac-Toe board */
void displayBoard(char board[3][3]) {
    for (int i = 0; i < 3; ++i) {
        displayOneRow(board[i][0], board[i][1], board[i][2]);
        if (i < 2) {
            displayHorizontalLine();
        }
    }
}

/* Implements the player's turn */
void playerturn(char board[3][3]) {
    int square;
    printf("\n\nYOUR TURN\n\n");
    do {
        printf("Please enter a number (0-8) to place 'O': ");
        scanf("%d", &square);
        if (square >= 0 && square <= 8) {
            if (board[square/3][square%3] == EMPTY) {
                board[square/3][square%3] = USER;
                break;
            } else {
                printf("The square is already OCCUPIED. Select another one.\n");
            }
        } else {
            printf("Invalid number. Enter between 0 and 8.\n");
        }
    } while(TRUE);
}

/* Implements the computer's turn */
void computerturn(char board[3][3]) {
    printf("\n\nCOMPUTER's TURN\n\n");
    printf("Let my processor think!\n");
    Sleep(2000);  // <-- Correct Windows sleep in milliseconds!

    for(int i = 0; i < 3; ++i) {
        for(int j = 0; j < 3; ++j) {
            if (board[i][j] == EMPTY) {
                board[i][j] = COMPUTER;
                if (winner(board)) {
                    return;
                } else {
                    board[i][j] = EMPTY;
                }
                board[i][j] = USER;
                if (winner(board)) {
                    board[i][j] = COMPUTER;
                    return;
                } else {
                    board[i][j] = EMPTY;
                }
            }
        }
    }

    if (board[1][1] == EMPTY) {
        board[1][1] = COMPUTER;
        return;
    }

    do {
        int row = rand() % 3;
        int col = rand() % 3;
        if (board[row][col] == EMPTY) {
            board[row][col] = COMPUTER;
            return;
        }
    } while(TRUE);
}

/* Checks if there is a winner */
int winner(char board[3][3]) {
    for(int i = 0; i < 3; i++) {
        if(rowIsWinner(board[0][i], board[1][i], board[2][i])) {
            return TRUE;
        } else if(rowIsWinner(board[i][0], board[i][1], board[i][2])) {
            return TRUE;
        }
    }
    if (rowIsWinner(board[0][0], board[1][1], board[2][2]) || rowIsWinner(board[0][2], board[1][1], board[2][0])) {
        return TRUE;
    }
    return FALSE;
}

/* Checks if the board is full */
int boardisfull(char board[3][3]) {
    for(int i = 0; i < 9; ++i) {
        if(board[i/3][i%3] == EMPTY) {
            return FALSE;
        }
    }
    return TRUE;
}

/* Runs the game loop */
void gameplay(char board[3][3]) {
    while(TRUE) {
        displayTTTBoards();
        printf("\n\n");
        displayBoard(board);

        playerturn(board);
        if (winner(board)) {
            printf("\nCongratulations! YOU WIN!\n");
            displayBoard(board);
            break;
        } else if (boardisfull(board)) {
            printf("NO ONE WINS!\n");
            break;
        }

        computerturn(board);
        if (winner(board)) {
            printf("\nWELL PLAYED\nComputer WINS!\n");
            displayBoard(board);
            break;
        } else if (boardisfull(board)) {
            printf("NO ONE WINS!\n");
            break;
        }
    }
}
